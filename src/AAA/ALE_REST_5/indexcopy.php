<?phpheader("Cache-Control: no-cache, must-revalidate");include_once(str_replace('//','/',dirname(__FILE__).'/') .'../../../classes/dbClass.php');include_once('function.php');class aaa{	 public function __construct($network_name,$access_method)	{		$db_class = new db_functions();		$this->network_name = $db_class->setVal("network_name",'ADMIN');		$this->lib_name = $network_name;			}	public function getNetworkConfig($network,$field)	{		$query = "SELECT $field AS f FROM exp_network_profile WHERE network_profile = '$network' LIMIT 1";		$query_results=mysql_query($query);		while($row=mysql_fetch_array($query_results)){			return $row['f'];		}	}	public function log($aaa_username,$function,$function_name,$description,$method,$api_status,$api_details,$api_data,$group_id=null){		 $query = "INSERT INTO `exp_aaa_logs`		(`username`,`function`, function_name,`description`,api_method, `api_status`, `api_description`, `api_data`, `create_date`, `create_user`,group_id)		VALUES ('$aaa_username','$function','$function_name', '$description','$method', '$api_status', '$api_details', '$api_data', NOW(), 'Support','$group_id')";		$query_results=mysql_query($query);	}	public function getGroup($token){			 $query = "SELECT `group` from exp_security_tokens		WHERE token_id = '$token'";			$query_results=mysql_query($query);		while($row=mysql_fetch_array($query_results)){			$group = $row[group];		}	return $group;			//$other_parameters_array = (array)json_decode($other_parameters);		//return $other_parameters_array[realm];	}	public function getPurgeTime($realm){		 $query = "SELECT purge_time AS f FROM `exp_products_distributor` p ,`exp_mno_distributor` d                   WHERE d.distributor_code=p.`distributor_code`                   AND d.`verification_number`='$realm'                 AND p.network_type='guest'";		$query_results=mysql_query($query);		while($row=mysql_fetch_array($query_results)){			$purg_time = $row[f];		}return $purg_time;		//$other_parameters_array = (array)json_decode($other_parameters);		//return $other_parameters_array[realm];	}	public function getToken($mac){				$query = "SELECT token FROM exp_customer_sessions_mac WHERE mac = '$mac' LIMIT 1";				$query_results=mysql_query($query);		while($row=mysql_fetch_array($query_results)){			$token = $row[token];		}					return $token;	}	public function updateAccount($account_type,$portal_number,$mac,$first_name,$last_name,$birthday,$gender,$relationship,$email,$mobile_number,$product,$timegap,$realm){		$base_url = $this->getNetworkConfig($this->network_name, 'api_base_url');		$timezone=$this->getNetworkConfig($this->network_name,'api_time_zone');		$tz_object = new DateTimeZone($timezone);		$datetime = new DateTime(null,$tz_object);		$begindate = $datetime->format('Y-m-d H:i:s');		$datetime->add(new DateInterval($timegap));		$enddate = $datetime->format('Y-m-d H:i:s');		//$token_id = $this->getToken($mac);				$organization = $realm;//$this->getGroup($token_id);		$user_name_ale = $organization.'/'.$mac;						if(strlen($organization)=='0'){			$organization = $this->getNetworkConfig($this->network_name, 'api_acc_org');		}						include_once('lib/nusoap-update.php');				$useCURL = isset($_POST['usecurl']) ? $_POST['usecurl'] : '0';		$client = new nusoap_client_u("$base_url", false,'', '', '', '');		$err = $client->getError();		if ($err) {					$this->log($user_name_ale,__FUNCTION__, 'Update Account', $base_url, 'SOAP', '1022', $client->response, $client->request,$organization);			return 'status=failed&status_code=1022&Description=Soap Constructor Error';			// SOAP Constructor Error		}				$client->setUseCurl($useCURL);		$product_list =  explode(',',$product);		$srvice_profile_array = array();		foreach ($product_list as $key => $value){			$srvice_profile_array[$value] = 'ADD|true';		}		$user_date_array = array(				'Gender'      => $gender,				'Age'      => $birthday,		);        $purge_delay_time=$this->getPurgeTime($realm);        if($purge_delay_time==''){            $purge_delay_time = $this->getNetworkConfig($this->network_name, 'purge_delay_time');        }				if($account_type == 'new'){			$params_update = array(					//'PAS-First-Name'    => $first_name,					//'PAS-Last-Name'     => $last_name,					'Valid-From'    => $begindate,					'Valid-Until'   	=> $enddate,					'Purge-Delay-Time'   	=> $purge_delay_time,					'Account-State'   	=> "Active",										'PAS-Account-Type'   	=> 'REMOVE|',					'Service-Profiles' => $srvice_profile_array,					'PAS-Account-Locked' => 'False',					'PAS-Allow-Extend' => 'True',					'PAS-Allow-Overwrite' => 'True',					'First-Access'   	=> 'REMOVE|',					'Last-Access'   	=> 'REMOVE|',					'EMAIL' => $email,					'User-Data' => $user_date_array,			);		}		else if($account_type == 'ex'){			$params_update = array(					'Purge-Delay-Time'   	=> $purge_delay_time,					'First-Access'   	=> 'REMOVE|',					'Last-Access'   	=> 'REMOVE|',					'Valid-Until'   => $enddate,			);		}		$result = $client->call('updateAccountRequest', $params_update,'User-Name',$user_name_ale,$organization,'Aptilo-WiFi-Account-DB', 'http://soap.amazon.com');		if ($client->fault) {			$this->log($user_name_ale,__FUNCTION__, 'Update Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);			return 'status=failed&status_code=1021&Description=SOAP Eror';			//SOAP Fault Error		}				else {			$err = $client->getError();			if ($err) {				$this->log($user_name_ale,__FUNCTION__, 'Update Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);				return 'status=failed&status_code=1021&Description=SOAP Fault Eror';				// SOAP Fault Error			}					else {				// Soap Success				//print_r($client->response);						$status_code = $result['!code'];				$desc = $result['!message'];				$status = $result['!status'];				$details = $result['details'];				$ref = $result['!reference'];			/*	$myFile4 = "log/ale_update.txt";				$fh = fopen($myFile4, 'a') or die("can't open file");				$header = 'Request '.$client->request.' Response '.$client->response.'|';				fwrite($fh, $header); */				$request_array=array(					'Purge-Delay-Time'   	=> $purge_delay_time,					'First-Access'   	=> 'REMOVE|',					'Last-Access'   	=> 'REMOVE|',					'Valid-Until'   => $enddate,					'Valid-From'    => $begindate,					'Purge-Delay-Time'   	=> $purge_delay_time,					'Account-State'   	=> "Active",					'PAS-Account-Type'   	=> 'REMOVE|',					'Service-Profiles' => $srvice_profile_array,					'PAS-Account-Locked' => 'False',					'PAS-Allow-Extend' => 'True',					'PAS-Allow-Overwrite' => 'True',					'First-Access'   	=> 'REMOVE|',					'Last-Access'   	=> 'REMOVE|',					'EMAIL' => $email,					'User-Data' => $user_date_array,					'User-name' =>$user_name_ale				); 			//	echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';			//	echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';				$request_array=json_encode($request_array);				if($status_code == '200'){					$this->log($user_name_ale,__FUNCTION__, 'Update Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					return 'status=success&status_code='.$status_code.'&Description=Account Modified Success - '.$status_code;										}				else{					$this->log($user_name_ale,__FUNCTION__, 'Update Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					return 'status=failed&status_code='.$status_code.'&Description='.$desc.' - '.$status_code;					// SOAP Parameter Error				}					}		}						// echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';		// echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';		// echo '<h2>Debug</h2><pre>' . htmlspecialchars($client->getDebug(), ENT_QUOTES) . '</pre>'; 		}	public function createAccount($portal_number,$mac,$first_name,$last_name,$birthday,$gender,$relationship,$email,$mobile_number,$product,$timegap,$realm){		/*	$tz_object = new DateTimeZone($timezone);		$datetime = new DateTime(null,$tz_object);		$begindate = $datetime->format('Y-m-d H:i:s');		$datetime->add(new DateInterval($timegap));		$enddate = $datetime->format('Y-m-d H:i:s');  */				$base_url = $this->getNetworkConfig($this->network_name, 'api_base_url');					//$token_id = $this->getToken($mac);				$organization = $realm;//$this->getGroup($token_id);				if(strlen($organization)=='0'){			$organization = $this->getNetworkConfig($this->network_name, 'api_acc_org');		}		//echo 'src/AAA/'.$this->lib_name.'/lib/nusoap.php';		include_once('lib/nusoap.php');				$useCURL = isset($_POST['usecurl']) ? $_POST['usecurl'] : '0';		$client = new nusoap_client("$base_url", false,'', '', '', '');				$err = $client->getError();		if ($err) {			//echo"1";			$this->log($organization.'/'.$mac,__FUNCTION__, 'Create Account', $base_url, 'SOAP', '1022', $client->response, $client->request,$organization);			return 'status=failed&status_code=1022&Description=Soap Constructor Error';			/* SOAP Constructor Error */		}		$product = (string)$product;/* 		$srvice_profile_array = array(						$product  => 'true'		);		 */		$client->setUseCurl($useCURL);		// This is an archaic parameter list		$params = array(				'Password'      => $organization.'/'.$mac,				'User-Name'     => $organization.'/'.$mac,				'Group' => $organization, //'MSISDN,copy',	// copy="true"				'Account-State' => 'Inactive', // Active or Inactive				'PAS-Account-Type' => "",				//'Service-Profiles' => $srvice_profile_array, //$this->network('PRODUCT'),				'PAS-Account-Locked' => 'True',//$this->network('PAS_Account_Locked'),//'False',				'PAS-Allow-Extend' => 'True',//$this->network('PAS_Allow_Extend'),//'True',				'PAS-Allow-Overwrite' => 'True',//$this->network('PAS_Allow_Overwrite'),//'True',				//'Valid-From'    => $begindate,	// 1415092796.2				//'Valid-Until'   => $enddate				);				$result = $client->call('createAccountRequest', $params,$organization,'Aptilo-WiFi-Account-DB', 'http://soap.amazon.com');					/*	$myFile4 = "log/ale.txt";		$fh = fopen($myFile4, 'a') or die("can't open file");		$header = 'Request '.$client->request.' Response '.$client->response.'|';		fwrite($fh, $header); */										//echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';		//echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';				if ($client->fault) {			//echo"2";			$this->log($organization.'/'.$mac,__FUNCTION__, 'Create Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);			return 'status=failed&status_code=1021&Description=SOAP Eror';			/* SOAP Fault Error */		}				else {					$err = $client->getError();			if ($err) {				//echo"3";				$this->log($organization.'/'.$mac,__FUNCTION__, 'Create Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);				return 'status=failed&status_code=1021&Description=SOAP Fault Eror';				/* SOAP Fault Error */			}					else {				// Soap Success				//print_r($result);						$status_code = $result['result']['!code'];				$desc = $result['result']['!message'];				$status = $result['result']['!status'];				$details = $result['details'];				$ref = $result['!reference'];				$request_array=array(					'Password'      => $organization.'/'.$mac,					'User-Name'     => $organization.'/'.$mac,					'Group' => $organization, //'MSISDN,copy',	// copy="true"					'Account-State' => 'Inactive', // Active or Inactive					'PAS-Account-Type' => "",					//'Service-Profiles' => $srvice_profile_array, //$this->network('PRODUCT'),					'PAS-Account-Locked' => 'True',//$this->network('PAS_Account_Locked'),//'False',					'PAS-Allow-Extend' => 'True',//$this->network('PAS_Allow_Extend'),//'True',					'PAS-Allow-Overwrite' => 'True',//$this->network('PAS_Allow_Overwrite'),//'True',					//'Valid-From'    => $begindate,	// 1415092796.2					//'Valid-Until'   => $enddate				);				//	echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';				//	echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';				$request_array=json_encode($request_array);							if($status_code == '200'){					$this->log($organization.'/'.$mac,__FUNCTION__, 'Create Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					return 'status=success&status_code='.$status_code.'&Description=Account Creation Success - '.$status_code;				}				else{					//echo"4";					$this->log($organization.'/'.$mac,__FUNCTION__, 'Create Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					return 'status=failed&status_code='.$status_code.'&Description='.$desc.' - '.$status_code;					/* SOAP Parameter Error */				}					}		}	}	public function checkAccount($mac,$realm=NULL){				$base_url = $this->getNetworkConfig($this->network_name, 'api_base_url');		 					if(strlen($realm)){			$organization = $realm;		}		else{			$token_id = $this->getToken($mac);			$organization = $this->getGroup($token_id);					if(strlen($organization)=='0'){				$organization = $this->getNetworkConfig($this->network_name, 'api_acc_org');			}		}			include_once('lib/nusoap-update2.php');			$useCURL = isset($_POST['usecurl']) ? $_POST['usecurl'] : '0';		$client = new nusoap_client("$base_url", false,'', '', '', '');			$err = $client->getError();		if ($err) {				return 'status=failed&status_code=1022&Description=Soap Constructor Error';			/* SOAP Constructor Error */		}					$client->setUseCurl($useCURL);		// This is an archaic parameter list		$params = array(				'User-Name'     => $organization.'/'.$mac,			);			$result = $client->call('getAccountRequest', $params,$organization,'Aptilo-WiFi-Account-DB', 'http://soap.amazon.com');			/*	$myFile4 = "log/ale_query.txt";		$fh = fopen($myFile4, "a") or die("can't open file");		$header = 'Request '.$client->request.' Response '.$client->response.'|';		fwrite($fh, $header);*/						//echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';		//echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';		$this->log($organization.'/'.$mac,__FUNCTION__, 'Check Account', $base_url, 'SOAP', '1022', $client->response, $client->request,$organization);			if ($client->fault) {			return 'status=failed&status_code=1021&Description=SOAP Eror';			/* SOAP Fault Error */		}			else {				$err = $client->getError();			if ($err) {				return 'status=failed&status_code=1021&Description=SOAP Fault Eror';				/* SOAP Fault Error */			}				else {				// Soap Success				//print_r($result);					$status_code = $result['result']['!code'];				$desc = $result['result']['!message'];								if(is_array($result[details][detail])){					$desc = $result[details][detail]['!message'];				}				$data_array = $result[responses][response][parameter];								foreach ($data_array as $key=>$value){					//print_r($value);					//echo $value['!name'];					//echo $value['!value'];					if($value['!name']=='Valid-Until'){						//echo '---';						//print_r($value);						$valid_until = $value['!value'];					}										if($value['!name']=='Account-State'){						//echo '---';						//print_r($value);						$account_state = $value['!value'];					}									}								if($account_state=='Active'){										$ac_state='Active';									}else{										$ac_state='Inactive';									}												//print_r($data_array);								$status = $result['result']['!status'];				$details = $result['details'];				$ref = $result['!reference'];				$request_array=array(					'First-Access'   	=> $organization.'/'.$mac				);				//	echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';				//	echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';				$request_array=json_encode($request_array);				$this->log($organization.'/'.$mac,__FUNCTION__, 'Update Account', $base_url, 'SOAP', $status_code, $details, $request_array,$organization);					 				if($status_code == '200'){					return 'status=success&status_code='.$status_code.'&Description=Account Retrieving Success - '.$status_code.'&expire='.$valid_until.'&validity='.$ac_state;					}				else{					return 'status=failed&status_code='.$status_code.'&Description='.$status_code;					/* SOAP Parameter Error */				}				}		}	}public function checkMacAccount($mac,$realm){			$base_url = $this->getNetworkConfig($this->network_name, 'api_base_url');		 		$organization = $realm;		$username=$organization.'/'.$mac;				include_once('lib/nusoap-update2.php');			$useCURL = isset($_POST['usecurl']) ? $_POST['usecurl'] : '0';		$client = new nusoap_client_u2("$base_url", false,'', '', '', '');			$err = $client->getError();		if ($err) {			$this->log($username,__FUNCTION__, 'Get Account', $base_url, 'SOAP', '1022', $client->response, $client->request,$organization);			return 'status=failed&status_code=1022&Description=Soap Constructor Error';			/* SOAP Constructor Error */		}					$client->setUseCurl($useCURL);		// This is an archaic parameter list		$params = array(				'User-Name'     => $username,			);			$result = $client->call('getAccountRequest', $params,$organization,'Aptilo-WiFi-Account-DB', 'http://soap.amazon.com');					if ($client->fault) {			$this->log($username,__FUNCTION__, 'Get Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);			return 'status=failed&status_code=1021&Description=SOAP Eror';			/* SOAP Fault Error */		}			else {				$err = $client->getError();			if ($err) {				$this->log($username,__FUNCTION__, 'Get Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);				return 'status=failed&status_code=1021&Description=SOAP Fault Eror';				/* SOAP Fault Error */			}				else {				// Soap Success				//print_r($result);/*					$status_code = $result['result']['!code'];				$desc = $result['result']['!message'];				$responses=$result['responses'];*/				if(is_array($result[result])){					$status_code = $result[result]['!code'];					$desc = $result[result]['!message'];					$status = $result[result]['!status'];					$details = $result[result]['details'];					$ref = $result[result]['!reference'];										if(is_array($result[details][detail])){						$desc = $result[details][detail]['!message'];					}				}else{					$status_code = $result['!code'];					$desc = $result['!message'];					$status = $result['!status'];					$details = $result['details'];					$ref = $result['!reference'];				}								$profile_string_final = '';								$master_array = $result[responses][response];				//print_r($master_array);				$master_array_size = sizeof($master_array);											$key_array_1 = array_keys($master_array);																//	$key_array_value = '1';				$key_array_value = strtoupper($key_array_1[0]);								if($key_array_value == 'PARAMETER'){										//echo $key_array_value;										//	foreach ($master_array as $key_this => $obj){												$obj = $master_array;						$para_array = $obj['parameter'];						$group_array = $obj['group'];													//print_r($para_array);													$profile_string = '';													for($i=0;$i<sizeof($para_array);$i++){							$obj_name = $obj['parameter'][$i]['!name'];							$obj_value = $obj['parameter'][$i]['!value'];							$profile_string .= $obj_name.'='.$obj_value.'&';						}																								for($k=0;$k<sizeof($group_array);$k++){																					$group_name = $group_array[$k]['!name'];							$sub_group_array = $group_array[$k]['parameter'];													if($group_name == 'User-Data'){								for($j=0;$j<sizeof($sub_group_array);$j++){															$sub_name = $sub_group_array[$j]['!name'];									$sub_val = $sub_group_array[$j]['!value'];															$sub_str_text = $sub_name.'='.$sub_val.'&';									$profile_string .= $sub_str_text;														}							}															if($group_name == 'Service-Profiles'){								//print_r($sub_group_array);								$service_profile_list = $sub_group_array[0]['!name'].','.$sub_group_array[1]['!name'].','.$sub_group_array[2]['!name'];								$profile_string .= 'Service-Profiles='.$service_profile_list.'&';							}																				/*							 if($group_name == 'Credits'){							 $profile_string .= 'Credits='.$sub_group_array['!name'].'#'.$sub_group_array['!value'].'&';							 }							 								 */												}													//echo $profile_string;						$profile_string_final .= $profile_string.'|';				//	}																		}												else{									foreach ($master_array as $key_this => $obj){												/* if main array has single element*/						if(($master_array_size == 1)){							$obj = $master_array;						}						/* if main array has single element*/													$para_array = $obj['parameter'];						$group_array = $obj['group'];												//print_r($para_array);												$profile_string = '';												for($i=0;$i<sizeof($para_array);$i++){							$obj_name = $para_array[$i]['!name'];							$obj_value = $para_array[$i]['!value'];							$profile_string .= $obj_name.'='.$obj_value.'&';						}																		for($k=0;$k<sizeof($group_array);$k++){													$group_name = $group_array[$k]['!name'];							$sub_group_array = $group_array[$k]['parameter'];													if($group_name == 'User-Data'){								for($j=0;$j<sizeof($sub_group_array);$j++){															$sub_name = $sub_group_array[$j]['!name'];									$sub_val = $sub_group_array[$j]['!value'];															$sub_str_text = $sub_name.'='.$sub_val.'&';									$profile_string .= $sub_str_text;														}							}														if($group_name == 'Service-Profiles'){								$service_profile_list = $sub_group_array[0]['!name'].','.$sub_group_array[1]['!name'].','.$sub_group_array[2]['!name'];																$profile_string .= 'Service-Profiles='.$service_profile_list.'&';							}																				/* 							 						if($group_name == 'Credits'){								$profile_string .= 'Credits='.$sub_group_array['!name'].'#'.$sub_group_array['!value'].'&';							}														*/												}												//echo $profile_string;						$profile_string .='|';						//echo $profile_string.'<br />';						//echo '<br><br><br>';						$profile_string_final .= $profile_string;					}				}								//print_r($responses);											$this->log($username,__FUNCTION__, 'Get Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					 				if($status_code == '200'){					return 'status=success&status_code='.$status_code.'&Description='.urlencode($profile_string_final);;					}				else{					return 'status=failed&status_code='.$status_code.'&Description='.$desc;					/* SOAP Parameter Error */				}				}		}	}	public function checkRealmAccount($realm){				$base_url = $this->getNetworkConfig($this->network_name, 'api_base_url');		 		$organization = $realm;				include_once('lib/nusoap-update2.php');			$useCURL = isset($_POST['usecurl']) ? $_POST['usecurl'] : '0';		$client = new nusoap_client_u2("$base_url", false,'', '', '', '');			$err = $client->getError();		if ($err) {			$this->log('',__FUNCTION__, 'Get Account', $base_url, 'SOAP', '1022', $client->response, $client->request,$organization);			return 'status=failed&status_code=1022&Description=Soap Constructor Error';			/* SOAP Constructor Error */		}					$client->setUseCurl($useCURL);		// This is an archaic parameter list		$params = array(				'Group'     => $organization,			);			$result = $client->call('getAccountRequest', $params,$organization,'Aptilo-WiFi-Account-DB', 'http://soap.amazon.com');					if ($client->fault) {			$this->log('',__FUNCTION__, 'Get Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);			return 'status=failed&status_code=1021&Description=SOAP Eror';			/* SOAP Fault Error */		}			else {				$err = $client->getError();			if ($err) {				$this->log('',__FUNCTION__, 'Get Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);				return 'status=failed&status_code=1021&Description=SOAP Fault Eror';				/* SOAP Fault Error */			}				else {				// Soap Success				//print_r($result);/*					$status_code = $result['result']['!code'];				$desc = $result['result']['!message'];				$responses=$result['responses'];*/				if(is_array($result[result])){					$status_code = $result[result]['!code'];					$desc = $result[result]['!message'];					$status = $result[result]['!status'];					$details = $result[result]['details'];					$ref = $result[result]['!reference'];										if(is_array($result[details][detail])){						$desc = $result[details][detail]['!message'];					}				}else{					$status_code = $result['!code'];					$desc = $result['!message'];					$status = $result['!status'];					$details = $result['details'];					$ref = $result['!reference'];				}								$profile_string_final = '';								$master_array = $result[responses][response];				//print_r($master_array);				$master_array_size = sizeof($master_array);											$key_array_1 = array_keys($master_array);																//	$key_array_value = '1';				$key_array_value = strtoupper($key_array_1[0]);								if($key_array_value == 'PARAMETER'){										//echo $key_array_value;										//	foreach ($master_array as $key_this => $obj){												$obj = $master_array;						$para_array = $obj['parameter'];						$group_array = $obj['group'];													//print_r($para_array);													$profile_string = '';													for($i=0;$i<sizeof($para_array);$i++){							$obj_name = $obj['parameter'][$i]['!name'];							$obj_value = $obj['parameter'][$i]['!value'];							$profile_string .= $obj_name.'='.$obj_value.'&';						}																								for($k=0;$k<sizeof($group_array);$k++){																					$group_name = $group_array[$k]['!name'];							$sub_group_array = $group_array[$k]['parameter'];													if($group_name == 'User-Data'){								for($j=0;$j<sizeof($sub_group_array);$j++){															$sub_name = $sub_group_array[$j]['!name'];									$sub_val = $sub_group_array[$j]['!value'];															$sub_str_text = $sub_name.'='.$sub_val.'&';									$profile_string .= $sub_str_text;														}							}															if($group_name == 'Service-Profiles'){								//print_r($sub_group_array);								$service_profile_list = $sub_group_array[0]['!name'].','.$sub_group_array[1]['!name'].','.$sub_group_array[2]['!name'];								$profile_string .= 'Service-Profiles='.$service_profile_list.'&';							}																				/*							 if($group_name == 'Credits'){							 $profile_string .= 'Credits='.$sub_group_array['!name'].'#'.$sub_group_array['!value'].'&';							 }							 								 */												}													//echo $profile_string;						$profile_string_final .= $profile_string.'|';				//	}																		}												else{									foreach ($master_array as $key_this => $obj){												/* if main array has single element*/						if(($master_array_size == 1)){							$obj = $master_array;						}						/* if main array has single element*/													$para_array = $obj['parameter'];						$group_array = $obj['group'];												//print_r($para_array);												$profile_string = '';												for($i=0;$i<sizeof($para_array);$i++){							$obj_name = $para_array[$i]['!name'];							$obj_value = $para_array[$i]['!value'];							$profile_string .= $obj_name.'='.$obj_value.'&';						}																		for($k=0;$k<sizeof($group_array);$k++){													$group_name = $group_array[$k]['!name'];							$sub_group_array = $group_array[$k]['parameter'];													if($group_name == 'User-Data'){								for($j=0;$j<sizeof($sub_group_array);$j++){															$sub_name = $sub_group_array[$j]['!name'];									$sub_val = $sub_group_array[$j]['!value'];															$sub_str_text = $sub_name.'='.$sub_val.'&';									$profile_string .= $sub_str_text;														}							}														if($group_name == 'Service-Profiles'){								$service_profile_list = $sub_group_array[0]['!name'].','.$sub_group_array[1]['!name'].','.$sub_group_array[2]['!name'];																$profile_string .= 'Service-Profiles='.$service_profile_list.'&';							}																				/* 							 						if($group_name == 'Credits'){								$profile_string .= 'Credits='.$sub_group_array['!name'].'#'.$sub_group_array['!value'].'&';							}														*/												}												//echo $profile_string;						$profile_string .='|';						//echo $profile_string.'<br />';						//echo '<br><br><br>';						$profile_string_final .= $profile_string;					}				}								//print_r($responses);											$this->log('',__FUNCTION__, 'Get Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					 				if($status_code == '200'){					return 'status=success&status_code='.$status_code.'&Description='.urlencode($profile_string_final);;					}				else{					return 'status=failed&status_code='.$status_code.'&Description='.$desc;					/* SOAP Parameter Error */				}				}		}	}	public function deleteAccount($network_user){		include_once('lib/nusoap-delete.php');		$useCURL = isset($_POST['usecurl']) ? $_POST['usecurl'] : '0';		$base_url = $this->getNetworkConfig($this->network_name, 'api_base_url');		$client = new nusoap_client("$base_url", false,'', '', '', '');		$u_id = rand(1,9).uniqid().rand(1111,9999);		$network_user_arr=explode('/', $network_user);		$organization=$network_user_arr[0];		$err = $client->getError();		if($err) {			$desc = $client->getError();			return 'status=failed&status_code=1022&Description=Soap Constructor Error';			/* SOAP Constructor Error */		}		$client->setUseCurl($useCURL);		// This is an archaic parameter list		$params = array(			'User-Name' => $network_user		);		$result = $client->call('deleteAccountRequest', $params, 'Aptilo-WiFi-Account-DB', 'http://soap.amazon.com');		$request_html = $client->request;		$response_html = $client->response;		if ($client->fault) {			$desc = $client->fault;			$this->log($network_user,__FUNCTION__, 'Delete Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);			return 'status=failed&status_code=1021&Description=SOAP Eror';			/* SOAP Fault Error */		}		else {			$err = $client->getError();			if ($err) {				$desc = $client->getError();				$this->log($network_user,__FUNCTION__, 'Delete Account', $base_url, 'SOAP', '1021', $client->response, $client->request,$organization);				return 'status=failed&status_code=1021&Description=SOAP Fault Eror';				/* SOAP Fault Error */			}			else {				// Soap Success				//print_r($result);				if(is_array($result[result])){					$status_code = $result[result]['!code'];					$desc = $result[result]['!message'];					$status = $result[result]['!status'];					$details = $result[result]['details'];					$ref = $result[result]['!reference'];					if(is_array($result[details][detail])){						$desc = $result[details][detail]['!message'];					}					//$desc = $result[details][detail]['!message'];				}else{					$status_code = $result['!code'];					$desc = $result['!message'];					$status = $result['!status'];					$details = $result['details'];					$ref = $result['!reference'];				}				/*  				$status_code = $result['result']['!code'];                                $desc = $result['result']['!message'];                                $status = $result['result']['!status'];                                $details = $result['details'];                                $ref = $result['!reference'];  */				/* 			if(strlen($status_code) == 0){                                $status_code = $result['!code'];                                $desc = $result['!message'];                            } */				//$ex_1 = mysql_query($q_lo);				if($status_code == '200'){					$this->log($network_user,__FUNCTION__, 'Delete Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					return 'status=success&status_code='.$status_code.'&Description=Account Delete Success - '.$status_code;				}				else{					$this->log($network_user,__FUNCTION__, 'Delete Account', $base_url, 'SOAP', $status_code, $client->response, $client->request,$organization);					return 'status=failed&status_code='.$status_code.'&Description='.$desc.' - '.$status_code;					/* SOAP Parameter Error */				}			}		}		//	echo '<h2>Request</h2><pre>' . htmlspecialchars($client->request, ENT_QUOTES) . '</pre>';		//	echo '<h2>Response</h2><pre>' . htmlspecialchars($client->response, ENT_QUOTES) . '</pre>';	}}?>